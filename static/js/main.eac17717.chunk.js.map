{"version":3,"sources":["../external \"React\"","../external \"ReactDOM\"","components/ABTestContext.js","components/ABTestToggle.js","components/ABTestBar.js","components/Body.js","components/TopNav.js","components/View.js","components/Shell.js","index.js"],"names":["module","exports","React","ReactDOM","ctx","createContext","Consumer","Provider","Component","constructor","props","super","this","state","merge","value","activateTest","bind","deactivateTest","getTests","getActiveVariant","getVariants","setActiveVariant","testName","activeTests","includes","setState","filter","t","tests","variant","variants","render","actions","children","defaultProps","ROOT_CLASS","styles","css","ABTestBar","activeVariant","testVariants","className","map","v","id","type","name","defaultChecked","data-test-name","htmlFor","MODIFIER__BAR_OPENED","TOGGLE_ROOT_CLASS","useContext","abTestCtx","useState","barOpened","setBarOpened","toggles","navModifier","onChange","ev","cT","target","dataset","onClick","Body","activeVariants","Object","keys","key","ndx","values","TopNav","Array","fill","AB_TEST__NAV_POS","AB_TEST__FONT_COLOR","BODY_ROOT_CLASS","NAV_ROOT_CLASS","prevData","View","navVariant","colorVariant","variantModifiers","push","flatData","JSON","stringify","console","table","join","Shell","abTestData","fetch","then","resp","json","document","getElementById"],"mappings":"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","file":"static/js/main.eac17717.chunk.js","sourcesContent":["module.exports = React;","module.exports = ReactDOM;","import React, { Component, createContext } from 'react';\r\nimport { arrayOf, objectOf, shape, string } from 'prop-types';\r\nimport merge from 'lodash.merge';\r\n\r\nconst ctx = createContext();\r\n\r\nexport default ctx;\r\nexport const { Consumer } = ctx;\r\nexport class Provider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = merge({}, props.value);\r\n\r\n    this.activateTest = this.activateTest.bind(this);\r\n    this.deactivateTest = this.deactivateTest.bind(this);\r\n    this.getTests = this.getTests.bind(this);\r\n    this.getActiveVariant = this.getActiveVariant.bind(this);\r\n    this.getVariants = this.getVariants.bind(this);\r\n    this.setActiveVariant = this.setActiveVariant.bind(this);\r\n  }\r\n\r\n  activateTest(testName) {\r\n    if (!this.state.activeTests.includes(testName)) {\r\n      this.setState({ activeTests: [...this.state.activeTests, testName] });\r\n    }\r\n  };\r\n\r\n  deactivateTest(testName) {\r\n    if (this.state.activeTests.includes(testName)) {\r\n      this.setState({ activeTests: this.state.activeTests.filter((t) => t !== testName) });\r\n    }\r\n  };\r\n\r\n  getTests() {\r\n    return this.state.tests;\r\n  }\r\n\r\n  getActiveVariant(testName) {\r\n    return this.state.tests[testName] && this.state.tests[testName].variant;\r\n  }\r\n\r\n  getVariants(testName) {\r\n    return this.state.tests[testName] && this.state.tests[testName].variants;\r\n  }\r\n\r\n  setActiveVariant(testName, variant) {\r\n    if (this.state.tests[testName] && this.state.tests[testName].variants.includes(variant)) {\r\n      this.setState(merge({}, this.state, {\r\n        tests: { [testName]: { variant } }\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const value = {\r\n      // merge with current data\r\n      ...this.state,\r\n      // expose actions that allow for Provider updates\r\n      actions: {\r\n        activateTest: this.activateTest,\r\n        deactivateTest: this.deactivateTest,\r\n        getTests: this.getTests,\r\n        getActiveVariant: this.getActiveVariant,\r\n        getVariants: this.getVariants,\r\n        setActiveVariant: this.setActiveVariant,\r\n      },\r\n    };\r\n\r\n    return (\r\n      <ctx.Provider value={value}>\r\n        {this.props.children}\r\n      </ctx.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nProvider.defaultProps = {\r\n  value: {\r\n    activeTests: [],\r\n    tests: {},\r\n  },\r\n};\r\nProvider.propTypes = {\r\n  value: shape({\r\n    activeTests: arrayOf(string),\r\n    tests: objectOf(shape({\r\n      variant: string,\r\n      variants: arrayOf(string),\r\n    })),\r\n  }),\r\n};","import React, { Fragment } from 'react';\r\nimport { css } from 'emotion';\r\nimport { arrayOf, string } from 'prop-types';\r\n\r\nexport const ROOT_CLASS = 'ab-test-toggle';\r\nconst styles = css`\r\n  .${ROOT_CLASS} {\r\n\r\n    &__label {\r\n      padding-right: 0.5em;\r\n    }\r\n\r\n    &__toggle {\r\n\r\n      &-input {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        opacity: 0;\r\n\r\n        &:checked + .${ROOT_CLASS}__toggle-label {\r\n          color: #eee;\r\n          background: #333;\r\n        }\r\n      }\r\n\r\n      &-label {\r\n        padding: 0 0.5em;\r\n        border: solid 1px #333;\r\n        border-radius: 0.25em;\r\n        margin: 0 0.25em;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ABTestBar({\r\n  activeVariant,\r\n  testName,\r\n  testVariants,\r\n}) {\r\n  return (\r\n    <div className={`${ROOT_CLASS} ${styles}`}>\r\n      <label className={`${ROOT_CLASS}__label`}>{testName}</label>\r\n      {testVariants.map((v) => (\r\n         <Fragment key={v}>\r\n           <input id={`${testName}_${v}`} className={`${ROOT_CLASS}__toggle-input`} type=\"radio\" name={`${testName}_rad`} value={v} defaultChecked={activeVariant === v} data-test-name={testName} />\r\n           <label htmlFor={`${testName}_${v}`} className={`${ROOT_CLASS}__toggle-label`}>{v}</label>\r\n         </Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nABTestBar.propTypes = {\r\n  activeVariant: string,\r\n  testName: string,\r\n  testVariants: arrayOf(string),\r\n};\r\n","import React, { useContext, useState } from 'react';\r\nimport { css } from 'emotion';\r\nimport ABTestToggle, { ROOT_CLASS as TOGGLE_ROOT_CLASS } from './ABTestToggle';\r\nimport abTestCtx from './ABTestContext';\r\n\r\nconst MODIFIER__BAR_OPENED = 'is--opened';\r\nconst ROOT_CLASS = 'ab-test-bar';\r\nconst styles = css`\r\n  font-size: 1.5em;\r\n  padding: 1em;\r\n  border: solid 2px #333;\r\n  border-right: none;\r\n  border-bottom: none;\r\n  border-radius: 0.5em 0 0 0;\r\n  background: #ccc;\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  transform: translateY(100%);\r\n  transition: transform 200ms;\r\n\r\n  &.${MODIFIER__BAR_OPENED} {\r\n    transform: translateY(0%);\r\n  }\r\n\r\n  .${ROOT_CLASS} {\r\n\r\n    &__toggle-btn {\r\n      font-size: inherit;\r\n      padding: 0.25em 0.5em;\r\n      border: solid 2px #333;\r\n      border-bottom: none;\r\n      border-radius: 0.5em 0.5em 0em 0em;\r\n      outline: none;\r\n      background: #ccc;\r\n      position: absolute;\r\n      bottom: 100%;\r\n      right: 0;\r\n    }\r\n  }\r\n  \r\n  .${TOGGLE_ROOT_CLASS}:not(:first-child) {\r\n    margin-top: 1em;\r\n  }\r\n`;\r\n\r\nexport default function ABTestBar() {\r\n  const {\r\n    activeTests,\r\n    actions: {\r\n      getActiveVariant,\r\n      getTests,\r\n      getVariants,\r\n      setActiveVariant,\r\n    },\r\n  } = useContext(abTestCtx);\r\n  const [barOpened, setBarOpened] = useState(true);\r\n\r\n  const handleToggleClick = (ev) => {\r\n    const cT = ev.target;\r\n    setActiveVariant(cT.dataset.testName, cT.value);\r\n  };\r\n\r\n  function handleBarToggleClick() {\r\n    setBarOpened(!barOpened);\r\n  }\r\n\r\n  const toggles = activeTests\r\n    .filter((t) => !!getTests()[t])\r\n    .map((t) => {\r\n      const activeVariant = getActiveVariant(t);\r\n      return (\r\n        <ABTestToggle\r\n          key={t}\r\n          activeVariant={activeVariant}\r\n          testName={t}\r\n          testVariants={getVariants(t)}\r\n        />\r\n      );\r\n    });\r\n\r\n  const navModifier = barOpened ? MODIFIER__BAR_OPENED : '';\r\n\r\n  return (\r\n    <nav className={`${ROOT_CLASS} ${styles} ${navModifier}`}>\r\n      <div onChange={handleToggleClick}>{toggles}</div>\r\n      <button\r\n        className={`${ROOT_CLASS}__toggle-btn`}\r\n        onClick={handleBarToggleClick}\r\n      >A/B Tests</button>\r\n    </nav>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { css } from 'emotion';\r\nimport { arrayOf, shape, string } from 'prop-types';\r\n\r\nexport const ROOT_CLASS = 'body';\r\nconst styles = css`\r\n  font-size: 2em;\r\n  padding: 1em;\r\n  background: #333;\r\n  \r\n  h3 {\r\n    color: #aaa;\r\n    margin: 0.25em 0;\r\n  }\r\n  \r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  td {\r\n    width: 50%;\r\n    padding: 0.25em 0.5em;\r\n    border: solid 1px #777;\r\n  }\r\n  \r\n  thead td {\r\n    color: #eee;\r\n    background: rgba(255, 255, 255, 0.1);\r\n  }\r\n  \r\n  tbody td {\r\n    color: #ff8f00;\r\n  }\r\n`;\r\n\r\nexport default function Body({ activeVariants }) {\r\n  return (\r\n    <div className={`${ROOT_CLASS} ${styles}`}>\r\n      <h3>Active Tests</h3>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {Object.keys(activeVariants[0]).map((key) => (\r\n              <td key={key}>{key}</td>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {activeVariants.map((props, ndx) => (\r\n            <tr key={ndx}>\r\n              {Object.values(props).map((value) => (\r\n                <td key={value}>{value}</td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nBody.defaultProps = {\r\n  activeVariants: [],\r\n};\r\nBody.propTypes = {\r\n  activeVariants: arrayOf(shape({\r\n    name: string,\r\n    variant: string,\r\n  })),\r\n};\r\n","import React from 'react';\r\n\r\nexport const ROOT_CLASS = 'top-nav';\r\n\r\nexport default function TopNav() {\r\n  return (\r\n    <nav className={`${ROOT_CLASS}`}>\r\n      { Array(10).fill().map((v, ndx) => <button key={`btn_${ndx}`}>Button {ndx+1}</button>) }\r\n    </nav>\r\n  );\r\n}","import React, { Fragment, useContext } from 'react';\r\nimport { css } from 'emotion';\r\nimport abTestCtx from './ABTestContext';\r\nimport ABTestBar from './ABTestBar';\r\nimport Body, { ROOT_CLASS as BODY_ROOT_CLASS } from './Body';\r\nimport TopNav, { ROOT_CLASS as NAV_ROOT_CLASS } from './TopNav';\r\n\r\nexport const ROOT_CLASS = 'view';\r\nconst AB_TEST__NAV_POS = 'test001';\r\nconst AB_TEST__FONT_COLOR = 'test002';\r\nconst styles = css`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  \r\n  .${BODY_ROOT_CLASS} {\r\n    height: 100%;\r\n  }\r\n  \r\n  .${NAV_ROOT_CLASS} {\r\n    padding: 1em;\r\n    background: #ccc;\r\n    display: flex;\r\n  \r\n    button {\r\n      width: 100%;\r\n      font-size: 1.1em;\r\n      white-space: nowrap;\r\n      border: solid 1px;\r\n      border-top: none;\r\n      border-bottom: none;\r\n      background: transparent;\r\n    }\r\n    button:first-child {\r\n      border-left: none;\r\n    }\r\n    button:last-child {\r\n      border-right: none;\r\n    }\r\n  }\r\n  \r\n  &.${AB_TEST__NAV_POS}--A {\r\n    \r\n    .${NAV_ROOT_CLASS} {\r\n      background: #666;\r\n      \r\n      button {\r\n        color: #eee;\r\n        border-color: #333;\r\n      }\r\n    }\r\n  }\r\n  \r\n  &.${AB_TEST__NAV_POS}--B {\r\n    flex-direction: row;\r\n    \r\n    .${NAV_ROOT_CLASS} {\r\n      width: 200px;\r\n      flex-direction: column;\r\n      flex-shrink: 0;\r\n      \r\n      button {\r\n        text-align: left;\r\n        padding: 0.5em 0;\r\n        border: solid 1px #aaa;\r\n        border-left: none;\r\n        border-right: none;\r\n      }\r\n      button:first-child {\r\n        border-top: none;\r\n      }\r\n      button:last-child {\r\n        border-bottom: none;\r\n      }\r\n    }\r\n    \r\n    .${BODY_ROOT_CLASS} {\r\n      width: 100%;\r\n    }\r\n  }\r\n  \r\n  &.${AB_TEST__FONT_COLOR}--A {\r\n    \r\n    .${BODY_ROOT_CLASS} tbody td {\r\n      color: #7ce0ff;\r\n    }\r\n  }\r\n`;\r\nlet prevData;\r\n\r\nexport default function View() {\r\n  const {\r\n    activeTests,\r\n    actions: {\r\n      getActiveVariant,\r\n      getTests,\r\n    },\r\n  } = useContext(abTestCtx);\r\n  const navVariant = getActiveVariant(AB_TEST__NAV_POS);\r\n  const colorVariant = getActiveVariant(AB_TEST__FONT_COLOR);\r\n  const variantModifiers = [];\r\n  \r\n  if (navVariant !== 'Control') variantModifiers.push(`${AB_TEST__NAV_POS}--${navVariant}`);\r\n  if (colorVariant !== 'Control') variantModifiers.push(`${AB_TEST__FONT_COLOR}--${colorVariant}`);\r\n  \r\n  const activeVariants = [];\r\n  activeTests\r\n    .filter((t) => !!getTests()[t])\r\n    .map((t) => {\r\n      const activeVariant = getActiveVariant(t);\r\n      activeVariants.push({ name: t, variant: activeVariant });\r\n    });\r\n  \r\n  const flatData = JSON.stringify(activeVariants);\r\n  if (flatData !== prevData) {\r\n    console.table(activeVariants);\r\n    prevData = flatData;\r\n  }\r\n  \r\n  return (\r\n    <div className={`${ROOT_CLASS} ${styles} ${variantModifiers.join(' ')}`}>\r\n      <ABTestBar />\r\n      <TopNav />\r\n      <Body activeVariants={activeVariants} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Provider as ABTestProvider } from './ABTestContext';\r\nimport View from './View';\r\n\r\nexport default class Shell extends Component {\r\n  render() {\r\n    const { abTestData } = this.props;\r\n\r\n    return (\r\n      <ABTestProvider value={abTestData}>\r\n        <View />\r\n      </ABTestProvider>\r\n    );\r\n  }\r\n}\r\n\r\nShell.propTypes = {\r\n  abTestData: ABTestProvider.propTypes.value,\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Shell from './components/Shell';\nimport './styles.css';\n\n// this data should be probagated via the Server, but this works for this example\nfetch('/ab-tests-data.json')\n  .then((resp) => resp.json())\n  .then((abTestData) => {\n    ReactDOM.render(<Shell abTestData={abTestData} />, document.getElementById('root'));\n  });\n"],"sourceRoot":""}